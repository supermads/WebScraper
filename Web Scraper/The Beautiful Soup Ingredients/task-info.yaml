type: edu
files:
- name: webscraper/scraper.py
  visible: true
  learner_created: false
- name: tests.py
  visible: false
  text: "import ast\nimport re\n\nfrom hstest.check_result import CheckResult\nfrom\
    \ hstest.stage_test import StageTest\nfrom hstest.test_case import TestCase\n\n\
    \nclass WebScraperTest(StageTest):\n    def generate(self):\n        return [TestCase(stdin=\"\
    https://www.imdb.com/title/tt10048342/\", check_function=self.check_queens_gambit,\n\
    \                         time_limit=50000),\n                TestCase(stdin=\"\
    https://www.imdb.com/title/tt0068646/\", check_function=self.check_godfather,\n\
    \                         time_limit=50000),\n                TestCase(stdin=\"\
    https://www.imdb.com/name/nm0001191/\", check_function=self.check_incorrect_url,\n\
    \                         time_limit=50000),\n                TestCase(stdin=\"\
    https://www.google.com/\", check_function=self.check_incorrect_url, time_limit=50000)]\n\
    \n    def check_incorrect_url(self, reply, attach=None):\n        if \"Invalid\
    \ movie page!\" in reply:\n            return CheckResult.correct()\n        else:\n\
    \            return CheckResult.wrong(\"\"\"If the link does not contain movie\
    \ info or not an IMDB resource, \n            please respond with 'Invalid movie\
    \ page!' message!\"\"\")\n\n    def check_queens_gambit(self, reply, attach=None):\n\
    \        possible_descriptions = [\"prodigious introvert Beth Harmon discovers\
    \ and masters the game of chess\"]\n        output = re.search('({.+})', reply)\n\
    \        if output is None:\n            return CheckResult.wrong(\"Output in\
    \ the format of JSON was expected.\\n\"\n                                    \
    \ \"However, it was not found.\")\n        reply_dict = ast.literal_eval(output.group(0))\n\
    \        user_description = reply_dict[\"description\"]\n        correct_descriptions\
    \ = sum([description.lower().strip() in user_description.lower().strip() for description\
    \ in possible_descriptions]) > 0\n        if reply_dict[\"title\"] == \"The Queen's\
    \ Gambit\" and correct_descriptions:\n            return CheckResult.correct()\n\
    \        else:\n            return CheckResult.wrong(\"Title or description in\
    \ returned dict do not seem to be correct.\")\n\n    def check_godfather(self,\
    \ reply, attach=None):\n        possible_descriptions = [\"An organized crime\
    \ dynasty's aging patriarch transfers control of his clandestine empire to his\
    \ reluctant son\",\n                                 \"The aging patriarch of\
    \ an organized crime dynasty transfers control of his clandestine empire to his\
    \ reluctant son.\"]\n        reply_dict = ast.literal_eval(re.search('({.+})',\
    \ reply).group(0))\n        title = reply_dict.get(\"title\")\n        desc =\
    \ reply_dict.get(\"description\")\n        if not title or not desc:\n       \
    \     return CheckResult.wrong(\"Seems like there is a title or a description\
    \ missing in the output dictionary.\")\n        user_description = reply_dict[\"\
    description\"]\n        correct_descriptions = sum([description.lower().strip()\
    \ in user_description.lower().strip() for description in possible_descriptions])\
    \ > 0\n        if reply_dict[\"title\"] == \"The Godfather\" and correct_descriptions:\n\
    \            return CheckResult.correct()\n        else:\n            return CheckResult.wrong(\"\
    Title or description in returned dict do not seem to be correct.\")\n\n\nif __name__\
    \ == '__main__':\n    WebScraperTest('webscraper.scraper').run_tests()\n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/145/stages/782/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/145/stages/782/implement">JetBrains
    Academy</a>
  time: Tue, 23 Feb 2021 20:46:52 UTC
record: 2
